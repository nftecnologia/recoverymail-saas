generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Organização (Multi-tenancy)
model Organization {
  id            String          @id @default(cuid())
  name          String
  domain        String?
  webhookSecret String?
  apiKey        String?         @unique
  
  // Configurações
  emailSettings Json?
  
  // Timestamps
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relações
  webhookEvents WebhookEvent[]
  emailJobs     EmailJob[]
  emailTemplates EmailTemplate[]
  emailLogs     EmailLog[]
}

// Eventos de webhook recebidos
model WebhookEvent {
  id              String         @id @default(cuid())
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])
  eventType       String
  payload         Json
  externalId      String?        // ID externo do evento
  status          EventStatus    @default(PENDING)
  processedAt     DateTime?
  error           String?
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relações
  emailLogs       EmailLog[]
  emailJobs       EmailJob[]
  
  // Índices
  @@unique([organizationId, externalId])
  @@index([organizationId])
  @@index([status])
}

// Jobs de email na fila
model EmailJob {
  id              String         @id @default(cuid())
  organizationId  String
  eventId         String
  emailTo         String
  emailSubject    String
  templateId      String?
  templateData    Json
  status          JobStatus      @default(PENDING)
  attemptNumber   Int            @default(1)
  scheduledFor    DateTime
  processedAt     DateTime?
  error           String?
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relações
  organization    Organization   @relation(fields: [organizationId], references: [id])
  event           WebhookEvent   @relation(fields: [eventId], references: [id])
  
  // Índices
  @@index([organizationId])
  @@index([status, scheduledFor])
}

// Templates de email customizados
model EmailTemplate {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  eventType      String       // Tipo do evento (ABANDONED_CART, etc)
  attemptNumber  Int
  name           String
  subject        String
  htmlContent    String       @db.Text
  variables      Json         // Lista de variáveis disponíveis
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, eventType, attemptNumber])
  @@index([organizationId])
}

// Logs de emails enviados
model EmailLog {
  id              String         @id @default(cuid())
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])
  eventId         String
  event           WebhookEvent   @relation(fields: [eventId], references: [id])
  emailId         String?        // ID do email no Resend
  to              String
  subject         String
  template        String
  status          EmailStatus    @default(PENDING)
  attemptNumber   Int
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  error           String?
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Índices
  @@index([organizationId])
  @@index([eventId])
  @@index([emailId])
}

// Enums
enum EventStatus {
  PENDING
  PROCESSING
  PROCESSED
  FAILED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
} 