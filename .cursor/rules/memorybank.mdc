---
description: 
globs: 
alwaysApply: true
---
#!/bin/bash
# Script para criar a estrutura inicial do Memory Bank

# Criar estrutura de diret√≥rios
mkdir -p memory-bank/snapshots

# Criar projectbrief.md
cat > memory-bank/projectbrief.md << 'EOF'
# Recovery SaaS - Project Brief

## Vis√£o do Projeto
Criar um SaaS multi-tenant para recupera√ß√£o autom√°tica de vendas perdidas atrav√©s de campanhas de email inteligentes, processando webhooks de plataformas de e-commerce e automatizando o envio de emails de recupera√ß√£o com timing otimizado.

## Problema Resolvido
- 70% dos carrinhos s√£o abandonados no e-commerce brasileiro
- Boletos expiram e vendas s√£o perdidas por falta de follow-up
- Processos manuais de recupera√ß√£o s√£o ineficientes e caros

## Requisitos Core

### Funcionais
- [ ] Receber e processar 12 tipos diferentes de webhooks
- [ ] Sistema de filas com delays customizados por evento
- [ ] Templates de email responsivos e personaliz√°veis
- [ ] Gera√ß√£o de conte√∫do com IA para otimizar convers√£o
- [ ] Dashboard com m√©tricas em tempo real
- [ ] Multi-tenancy com isolamento completo de dados
- [ ] API para integra√ß√£o com sistemas externos

### N√£o-Funcionais
- [ ] Processar 1000 webhooks/segundo
- [ ] Taxa de entrega de email > 95%
- [ ] Uptime 99.9%
- [ ] Conformidade com LGPD
- [ ] Escalabilidade horizontal

## Stack T√©cnica Definida
- **Backend**: Node.js + Express + TypeScript
- **Automa√ß√£o**: n8n (workflows visuais)
- **Banco de Dados**: PostgreSQL (Neon)
- **Cache/Filas**: Redis + Bull
- **Email**: Resend API
- **Frontend**: Next.js 14 (App Router)
- **IA**: OpenAI/Claude para gera√ß√£o de conte√∫do
- **Monitoramento**: Sentry + Prometheus
- **Hospedagem**: Vercel (Frontend) + Railway (Backend)
## Crit√©rios de Sucesso
- Aumentar taxa de recupera√ß√£o em 30% vs. email manual
- ROI positivo em 3 meses
- Reduzir tempo de setup para < 10 minutos
- NPS > 8 dos usu√°rios

## Marcos do Projeto
1. **MVP (4 semanas)**: Webhooks + 3 tipos de evento + emails b√°sicos
2. **Beta (8 semanas)**: Todos eventos + dashboard + IA
3. **v1.0 (12 semanas)**: Multi-tenancy completo + API p√∫blica
EOF

# Criar webhookContext.md
cat > memory-bank/webhookContext.md << 'EOF'
# Contexto de Webhooks - Recovery SaaS

## Status Geral: 2/12 webhooks implementados

## Detalhamento por Webhook

### 1. ABANDONED_CART ‚úÖ [100% completo]
**Descri√ß√£o**: Carrinho abandonado pelo cliente
**Payload Recebido**:
```json
{
  "event": "ABANDONED_CART",
  "checkout_id": "Q8J1N6K3",
  "checkout_url": "http://example.com/recovery/xxx",
  "total_price": "R$ 169,80",
  "customer": {
    "name": "Jo√£o da Silva",
    "email": "joao@email.com",
    "phone_number": "5511987654321"
  },
  "products": [{
    "name": "Produto X",
    "price": "R$ 119,90"
  }]
}
```
**Fluxo de Email Implementado**:
- ‚úÖ Email 1 (2h): Lembrete gentil - "Voc√™ esqueceu algo especial"
- ‚úÖ Email 2 (24h): Criando urg√™ncia - "Seus produtos podem acabar"
- ‚úÖ Email 3 (72h): √öltima chance - "10% de desconto exclusivo"

**C√≥digo**: `/backend/src/handlers/abandonedCart.handler.ts`
**Template**: `/backend/src/templates/abandoned-cart/`

### 2. BANK_SLIP_EXPIRED üü° [60% completo]
**Descri√ß√£o**: Boleto banc√°rio expirou sem pagamento
**Handler**: ‚úÖ Implementado
**Queue**: ‚úÖ Configurado
**Templates**: üî¥ Pendente
**Worker**: üü° Em desenvolvimento

### 3. PIX_EXPIRED üî¥ [0% completo]
**Descri√ß√£o**: QR Code PIX expirou
**Pr√≥ximos passos**:
- [ ] Criar handler
- [ ] Configurar delays (15min, 2h)
- [ ] Criar templates urgentes

### 4. SALE_REFUSED üî¥ [0% completo]
**Descri√ß√£o**: Pagamento recusado pela operadora

### 5. SALE_APPROVED üî¥ [0% completo]
**Descri√ß√£o**: Venda aprovada (confirma√ß√£o)

### 6. SALE_CHARGEBACK üî¥ [0% completo]
**Descri√ß√£o**: Chargeback recebido

### 7. SALE_REFUNDED üî¥ [0% completo]
**Descri√ß√£o**: Reembolso processado

### 8. BANK_SLIP_GENERATED üî¥ [0% completo]
**Descri√ß√£o**: Boleto gerado (lembrete de pagamento)

### 9. PIX_GENERATED üî¥ [0% completo]
**Descri√ß√£o**: PIX gerado (enviar QR Code)

### 10. SUBSCRIPTION_CANCELED üî¥ [0% completo]
**Descri√ß√£o**: Assinatura cancelada (win-back)

### 11. SUBSCRIPTION_EXPIRED üî¥ [0% completo]
**Descri√ß√£o**: Assinatura expirada (renova√ß√£o)

### 12. SUBSCRIPTION_RENEWED üî¥ [0% completo]
**Descri√ß√£o**: Assinatura renovada (confirma√ß√£o)
EOF

# Criar taskBreakdown.md
cat > memory-bank/taskBreakdown.md << 'EOF'
# Breakdown de Tarefas - Recovery SaaS

## üéØ Sprint Atual: Backend Core (Semana 1-2)

### TAREFA 1: Sistema Base de Webhooks [85% completo]
#### ‚úÖ Subtarefas Completas:
- [x] Setup Express + TypeScript
- [x] Estrutura de pastas do projeto
- [x] Configurar Prisma com schema inicial
- [x] Conex√£o com Neon PostgreSQL
- [x] Endpoint POST /webhook/:orgId b√°sico
- [x] Valida√ß√£o de payload com Zod
- [x] Salvar eventos no banco
- [x] Docker Compose para desenvolvimento

#### üü° Em Progresso:
- [ ] Valida√ß√£o de assinatura HMAC (50%)
  - [x] Fun√ß√£o de valida√ß√£o criada
  - [ ] Middleware implementado
  - [ ] Testes com diferentes secrets
  
#### üî¥ Pendentes:
- [ ] Rate limiting por organiza√ß√£o
  - [ ] Instalar express-rate-limit + redis-store
  - [ ] Configurar 100 req/min por org
  - [ ] Testes de carga
- [ ] Tratamento de erros padronizado
- [ ] Logs estruturados com Winston

### TAREFA 2: Sistema de Filas [40% completo]
#### ‚úÖ Completas:
- [x] Redis rodando no Docker
- [x] Bull instalado e configurado
- [x] Queue b√°sica "email-queue" criada
- [x] Conex√£o Redis testada

#### üü° Em Progresso:
- [ ] Worker principal (30%)
  ```typescript
  // Estrutura implementada:
  emailQueue.process(async (job) => {
    // TODO: Buscar evento do banco
    // TODO: Determinar template
    // TODO: Enviar email
  });
  ```

#### üî¥ Pendentes:
- [ ] Mapeamento evento ‚Üí delays
- [ ] Dead letter queue
- [ ] Bull Board para monitoramento
- [ ] M√©tricas de processamento

### TAREFA 3: Integra√ß√£o n8n [25% completo]
#### ‚úÖ Completas:
- [x] n8n rodando no Docker
- [x] Acesso configurado (admin/admin)
- [x] Workflow teste criado

#### üî¥ Pendentes:
- [ ] Webhook receiver no n8n
- [ ] Conex√£o n8n ‚Üí PostgreSQL
- [ ] Workflows por tipo de evento
- [ ] Documenta√ß√£o dos workflows

## üìã Checklist Di√°rio

### Segunda-feira
- [ ] Finalizar HMAC validation
- [ ] Criar testes para webhook handler
- [ ] Implementar primeiro worker completo

### Ter√ßa-feira
- [ ] Rate limiting
- [ ] Error handling middleware
- [ ] In√≠cio dos templates

### Quarta-feira
- [ ] Integra√ß√£o Resend
- [ ] Primeiro email enviado
- [ ] Tracking de abertura

## üöÄ Pr√≥ximas Sprints

### Sprint 2: Templates e Email (Semana 3)
- [ ] Sistema de templates com Handlebars
- [ ] Integra√ß√£o completa com Resend
- [ ] 5 templates principais
- [ ] A/B testing b√°sico

### Sprint 3: n8n Workflows (Semana 4)
- [ ] Workflow para cada tipo de evento
- [ ] Nodes customizados
- [ ] Integra√ß√£o com filas
- [ ] Documenta√ß√£o

### Sprint 4: Dashboard MVP (Semana 5-6)
- [ ] Setup Next.js
- [ ] Tela de eventos
- [ ] M√©tricas b√°sicas
- [ ] Configura√ß√µes

## üìù Notas Importantes
- Priorizar ABANDONED_CART e BANK_SLIP_EXPIRED (80% dos casos)
- Delay de emails deve ser configur√°vel por organiza√ß√£o
- Sempre testar com webhook real antes de marcar como completo
EOF

# Criar activeContext.md
cat > memory-bank/activeContext.md << 'EOF'
# Contexto Ativo - Sess√£o Atual

## üìÖ Data: [ATUALIZAR NO IN√çCIO DA SESS√ÉO]

## üéØ Foco da Sess√£o Anterior
Implementa√ß√£o do sistema base de webhooks e configura√ß√£o inicial do projeto.

## üíª √öltimo C√≥digo Trabalhado

### Arquivo: `backend/src/server.ts`
```typescript
// √öltimo estado: Webhook receiver b√°sico funcionando
app.post('/webhook/:orgId', async (req, res) => {
  // Valida√ß√£o b√°sica implementada
  // Salvamento no banco OK
  // Falta: HMAC validation, rate limiting
});
```

### Arquivo: `backend/src/workers/email.worker.ts`
```typescript
// Estado: Estrutura b√°sica criada
emailQueue.process(async (job) => {
  // TODO: Implementar l√≥gica de processamento
});
```

## üêõ Problemas Encontrados e Solu√ß√µes
1. **Problema**: Prisma Client n√£o gerado automaticamente
   **Solu√ß√£o**: Adicionar postinstall script: `"postinstall": "prisma generate"`

2. **Problema**: Redis connection refused no Docker
   **Solu√ß√£o**: Usar `redis://redis:6379` dentro do Docker, `localhost` fora

## üìù Decis√µes T√©cnicas Tomadas
- Usar Zod para valida√ß√£o de webhooks (type-safe)
- IDs como CUID ao inv√©s de UUID (mais curtos)
- Separar workers em arquivos individuais por tipo

## ‚è≠Ô∏è Pr√≥ximos Passos Imediatos
1. **PRIORIDADE ALTA**: Completar HMAC validation
   - Implementar validateSignature middleware
   - Adicionar testes
   
2. **PRIORIDADE M√âDIA**: Worker de ABANDONED_CART
   - Buscar evento do banco
   - Implementar delays (2h, 24h, 72h)
   - Criar job para cada delay

3. **PRIORIDADE BAIXA**: Bull Board
   - Configurar rota /admin/queues
   - Adicionar autentica√ß√£o b√°sica

## üîß Comandos √öteis para Retomar
```bash
# Subir ambiente de dev
docker-compose up -d

# Rodar backend
cd backend && npm run dev

# Testar webhook
node test-webhook.js

# Acessar n8n
open http://localhost:5678

# Ver logs do Redis
docker logs recovery-saas_redis_1
```

## üîó Contexto para o Cursor
"Estou desenvolvendo um Recovery SaaS. Implemente a valida√ß√£o HMAC para o webhook handler em /backend/src/middleware/validateSignature.ts seguindo o padr√£o j√° estabelecido no projeto."
EOF

# Criar snapshot inicial
DATE=$(date +%Y-%m-%d)
cat > memory-bank/snapshots/$DATE-inicio.md << 'EOF'
# Snapshot - In√≠cio do Projeto

## Resumo
In√≠cio do desenvolvimento do Recovery SaaS com foco na estrutura base do backend.

## Conquistas
- ‚úÖ Estrutura do projeto criada
- ‚úÖ Memory Bank configurado
- ‚úÖ Docker Compose funcionando
- ‚úÖ Webhook receiver b√°sico
- ‚úÖ Conex√£o com PostgreSQL (Neon)

## Estrutura Criada
```
recovery-saas/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ server.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ handlers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ workers/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îÇ   ‚îî‚îÄ‚îÄ prisma/
‚îú‚îÄ‚îÄ memory-bank/
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ test-webhook.js
```

## Pr√≥ximos Marcos
1. Sistema de webhooks completo com seguran√ßa
2. Processamento de filas funcionando
3. Primeiro email enviado com sucesso

## Aprendizados
- Neon requer SSL em produ√ß√£o
- Bull precisa de Redis 2.8.18+
- n8n pode consumir muita mem√≥ria, limitar no Docker
EOF

echo "‚úÖ Memory Bank criado com sucesso!"
echo ""
echo "üìÅ Estrutura criada em ./memory-bank/"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "1. Revise os arquivos criados"
echo "2. Ajuste o projectbrief.md com seus requisitos espec√≠ficos"
echo "3. Use o activeContext.md no in√≠cio de cada sess√£o"
echo "4. Mantenha o taskBreakdown.md sempre atualizado"
echo ""
echo "üí° Dica: Configure o Cursor para abrir automaticamente o Memory Bank:"
echo "   Preferences > Open Folders > Add ./memory-bank"
